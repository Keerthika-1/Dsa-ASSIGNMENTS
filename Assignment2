April1 11 Assignments
1.Given two arrays which are sorted in increasing order.
Find the Union of two arrays
A [3,5,6,8,9]
B [5,7,9]
import java.util.Scanner; 
public class demo
{
public static void main(String[]args)
{
int i,j,n1,n2;
Scanner sc=new Scanner(System.in); 
System.out.println("Enter number of elements of first array:"   );
n1=sc.nextInt();
System.out.print("Enter number of elements of second array:"  );
n2=sc.nextInt();
int a1[]=new int[n1];
int a2[]=new int[n2];
System.out.print("nEnter elements of first array in ascending order:"  );
for(i=0;i<n1;++i)
a1[i]=sc.nextInt();
System.out.print("nEnter elements of second array in ascending order:   ");
for(i=0;i<n2;++i)
a2[i]=sc.nextInt();
i=j=0;
System.out.print("nIntersection of Arrays: " );
while(i<n1&&j<n2)
{
if(a1[i]<a2[j])
i++;
else
if(a2[j]<a1[i])
j++;
else
{
System.out.print(a1[i]+" ");
i++;
j++;
}
}

}
}
---------------------------------------------------------------------------------------------------------------------------
 2. Given an array of size N-1 such that it only contains distinct integers in the range of 1 to N. Find the missing element
https://practice.geeksforgeeks.org/problems/missing-number-in-array1416/1

package practiceDsa.java;

public class findMissingNumber {

	public static void main(String[] args) {
		int[]a= {1,2,3,5,6,7,8};
		System.out.println(findDisappearedNumbers(a));
		 }
	 public static int findDisappearedNumbers(int[] nums)
	    {
	        int n=nums.length;
	        int sum=((n+1)*(n+2))/2;
	        for(int i=0;i<n;i++)
	          sum-=nums[i];
	        return sum;
	    }
	
		}
----------------------------------------------------------------------------------------------------------------------
3 https://practice.geeksforgeeks.org/problems/array-subset-of-another-array2317/1"
package practiceDsa.java;

public class checkSubsetORNot {

	public static void main(String[] args) {
		int[]arr1= {1,2,3,4,5,6};
		int[]arr2= {1,3,5};
		 int m = arr1.length; 
	        int n = arr2.length; 
	      
	        if(isSubset(arr1, arr2, m, n)) 
	            System.out.print("arr2[] is "
	                  + "subset of arr1[] "); 
	        else
	            System.out.print("arr2[] is "
	             + "not a subset of arr1[]");  
	}
	static boolean isSubset(int arr1[],  
            int arr2[], int m, int n) 
{ 
    int i = 0; 
    int j = 0; 
    for (i = 0; i < n; i++) 
    { 
        for (j = 0; j < m; j++) 
            if(arr2[i] == arr1[j]) 
                break; 
           if (j == m) 
            return false; 
    } 
        return true; 
} 
	
	

}

___________________________________________________________________________


---------------------------------------------------------------
April 12 Asssignment 

 1. Cyclically rotate an array n number of times
Time Complexity can be O(n2)
A[] = {1, 2, 3, 4, 5}
N = 1
Output; 5 1 2 3 4

A[] = {1, 2, 3, 4, 5}
N = 2
Output;  4 5 1 2 3 

A[] = {1, 2, 3, 4, 5}
N = 3
Output: 3 4 5 1 2

package practice.java;
import java.util.Arrays;
import java.util.Scanner;
public class nCirculated {
   public static void rightRotateByOne(int[]a)
		    {
		    	int last=a[a.length-1];
				for(int i=a.length-1;i>=1;i--) {
					a[i]=a[i-1];
					
				}
				a[0]=last;
		    
		    }	
		    public static void rightRotate(int[] a, int n)
		    {
		        
		   if (n < 0 || n >= a.length) {
		           return;
		        }
		 
		        for (int i = 0; i < n; i++) {
		            rightRotateByOne(a);
		        }
		    }

public static void main(String[] args) {
			    int[]a= {1,2,3,4,5,6,7};
			    System.out.println("enter a number");
			    Scanner sc=new Scanner(System.in);
			    int n=sc.nextInt();
			    
			    rightRotate(a, n);
			    
		        System.out.println(Arrays.toString(a));
		    
		    
 }

}	
______________________________________________________________   
2 Search Insert Position 
Given a sorted array of distinct integers and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.
You must write an algorithm with O(log n) runtime complexity.
Input: nums = [1,3,5,6], target = 5
Output: 2

Input: nums = [1,3,5,6], target = 2
Output: 1
Input: nums = [1,3,5,6], target = 7
Output: 4

package practiceDsa.java;
public class FindTargetNumber {
public static void main(String[] args) {
	int[]a= {1,3,5,6};
	int n=a.length;
	int k=2;
	int result=findIndex(a,n,k);
System.out.println(result);
	}
private static int findIndex(int[] a, int n,int k) {
			for(int i = 0; i < n; i++)
		      if (a[i] == k)
	            return i;
	 else if (a[i] > k)
	            return i;
		return n;
	}

}
---------------------------------------------------------------

April 13 Assignment
1. Find the maximum element in each row and each column in a matrix1 
package practiceDsa.java;

public class FindMaximumNumberInJava {
public static void main(String[] args) {
		int[][]arr= {{1,2,3,4},{4,3,5,67},{5,6,8,9},{1,99,7,77}};
maxelement(4, arr);
		}
	 private static void printArray(int[] result) {
	        for (int i =0; i<result.length;i++) {
	            System.out.println(result[i]);
	        }
	 	public static void maxelement(int no_of_rows, int[][] arr) {
        int i = 0;
          int max = 0;
        int[] result = new int[no_of_rows];
        while (i < no_of_rows) {
            for (int j = 0; j < arr[i].length; j++) {
                if (arr[i][j] > max) {
                    max = arr[i][j];
                }
            }
            result[i] = max;
            max =0;
            i++;
 }
        printArray(result);
 }
 	}
  _______________________________________________________
2 Search a sorted 2D Matrix

package practiceDsa.java;
public class findNumberInMatrix {
	public static void main(String[] args) {
		int[][]a= {{1,   4,  7, 11, 15},
		  {2,   5,  8, 12, 19},
		  {3,   6,  9, 16, 22},
		  {10, 13, 14, 17, 24},
		  {18, 21, 23, 26, 30}};
		int target=5;
		boolean result=findNumber(a,target);
		System.out.println(result);
		}
private static boolean findNumber(int[][] a, int target) {
		int m=a.length-1;
	    int n=a[0].length-1;
	 int i=m; 
	    int j=0;
	 while(i>=0 && j<=n){
	        if(target < a[i][j]){
	            i--;
	        }else if(target > a[i][j]){
	            j++;
	        }else{
	            return true;
	        }
	    
	    }
	 return false;
	}

	}

-------------------------------------------------------------------------------------------------------
3 Find the duplicate number
https://leetcode.com/problems/find-the-duplicate-number/
Given an array of integers nums containing n + 1 integers where each integer is in the range [1, n] inclusive.
There is only one repeated number in nums, return this repeated number.
You must solve the problem without modifying the array nums and uses only constant extra space.

package practiceDsa.java;
public class findduplicateelement {
	public static void main(String[] args) {
		int a[] = { 0, 4, 3, 2, 7, 8, 2, 3, 1 };
		 
        for (int i = 0; i < a.length; i++) {
            a[a[i] % a.length]
                = a[a[i] % a.length]
                  + a.length;
        }
        System.out.println("The repeating elements are : ");
        for (int i = 0; i < a.length; i++) {
            if (a[i] >= a.length * 2) {
                System.out.println(i + " ");
            }
        }

	}

}

----------------------------------------------------------------------------------------------------------------------
April 14 Assignment
1 . Print the sum of the boundary elements and diagonal elements in a given matrix of size m and n
import java.util.*;
public class boundary{
    public static int N = 4;
    static void diagonalBoundarySum(int arr[][]){
        int requiredS=0;
        for (int i = 0; i < N; i++) {
            for (int j = 0; j < N; j++) {
                if (i == j || (i + j) == N - 1) {
                    requiredSum += arr[i][j];
               }
                else if (i == 0 || j == 0 || i == N - 1|| j == N - 1) {
                    requiredSum += arr[i][j];
                }
            }
        }
     
       System.out.println(requiredSum);
    }
     
   public static void main(String args[])
    {
        int arr[][] = { { 1, 2, 3, 4 },{ 1, 2, 3, 4 },
                        { 1, 2, 3, 4 },{ 1, 2, 3, 4 } };
     
        diagonalBoundarySum(arr);
         
    }
}
--------------------------------------------------------------------------------------------------------------------
2 Print the prime numbers in the upper traingle of a 2D Matrix
public class upperTriangular{

public static void upper(int matrix,  int row, int col)
    {
        int i, j;
        for (i = 0; i < row; i++)
        {
            for (j = 0; j < col; j++)
            {
                if (i > j)
                {
                    System.out.print("0" + " ");
                }
                else
                System.out.print(matrix[i][j] + " ");
            }
            System.out.println();
        }
    }
      public static void main(String args[])
    {
        int matrix[][] = {{1, 2, 3},
                          {4, 5, 6},
                          {7, 8, 9}};
        int row = 3, col = 3;
          System.out.println("Upper triangular matrix: ");
        upper(matrix, row, col);
    }
}
-----------------------------------------------------------------------------------------------------------------

April 15 assignment
   1. Rotate a matrix in place by Anti-Clockwise by n times

public class AntiRoytated {
    public static void main(String[] args) {
    int[][] a={{1,2,3,4},{5,6,7,8},{9,10,11,12},{13,14,15,16}};
        System.out.println(Arrays.deepToString(a));

        for(int i=0;i<a.length;i++) {
            for (int j = i; j < a[0].length; j++) {
                int temp = a[i][j];
                a[i][j] = a[j][i];
                a[j][i] = temp;
            }
        }
        System.out.println(Arrays.deepToString(a));
        int n=a[0].length;

        for(int j=0;j<a.length;j++){
            for(int i=0;i<n/2;i++) {
                int temp=a[i][j];
                a[i][j]=a[n-i-1][j];
                a[i][n-i-1]=temp;
            }
        }
        System.out.println("rorated array");
        System.out.println(Arrays.deepToString(a));
    }
}

_____--------------------------------------------------------------------------------------------------------
2. Find the number of rows which is sorted in increasing order in a given matrix
public class increasingOrder {
 public static int search(int[][] mat, int n, int x)
  {
    if (n == 0)
      return -1;
    for (int i = 0; i < n; i++) {
      for (int j = 0; j < n; j++)
       
        if (mat[i][j] == x) {
          System.out.print("Element found at ("
                           + i + ", " + j
                           + ")\n");
          return 1;
        }
    }
 
    System.out.print(" Element not found");
    return 0;
  }
  public static void main(String[] args)
  {
    int mat[][] = { { 10, 20, 30, 40 },
                   { 15, 25, 35, 45 },
                   { 27, 29, 37, 48 },
                   { 32, 33, 39, 50 } };
 
    search(mat, 4, 29);
  }
}
_______________________________________________________________________

April 16 Assignment
1 Find the maximum number in an array
a[] = { 3,5,7,1,0};
package practiceDsa.java;

public class findMaximumNumUseRecursion {

	public static void main(String[] args) {
		int []a= {1,100,4,5,6};
		int n= a.length;
		int result=findMaxRecursion(a,n);
System.out.println(result);
	}

	private static int findMaxRecursion(int[] a, int n) {
		if(n == 1)
        return a[0];
         
        return Math.max(a[n-1], findMaxRecursion(a, n-1));
    }
 
	}
--------------------------------------------------------------------------------------------------
2 Find the sum of all numbers in an array
package practiceDsa.java;

public class sumOfElementUsingrescursion {

	public static void main(String[] args) {
		int[]a= {1,2,3,4,5};
		int sum = calculateSum(a, a.length);
		System.out.println(sum);
	}
		private static int calculateSum(int a[], int n) {
			 

	         if (n <= 0) {
	            return 0;
	          }
	 
	    
	          return calculateSum(a, n-1 ) + a[n-1];
	       }

	}

-----------------------------------------------------------------------------------------------------------------------
3 Print the negative numbers in an array
package practiceDsa.java;

public class negativeNumberUsingRecursion {

	public static void main(String[] args) {
	
		
	int j = 0;
	int[] a = {-40, 15, -4, 11, -8, -13, 22, 16, -11, -99, 55, 18, -60};
	
	
	System.out.print("\nList of Negative Numbers in NEG Array : ");
	while(j < a.length) 
	{
		if(a[j] < 0) {
			System.out.format("%d ", a[j]);
		}
		j++;
	}

	}
}
-----------------------------------------------------------------------------------------------------
4   Print the reverse of a number
package practiceDsa.java;
import java.util.Arrays;
public class reverseusingRecursion {

	public static void main(String[] args) {
	int[]a= {1,2,3,4,5};
	int start=0;
	int end=a.length-1;
	 findReverse(a,start,end);
	System.out.println(Arrays.toString(a));

}

	private static void findReverse(int[] a, int start, int end) {
		int temp;
		if(start<end) {
			 temp=a[start];
			 a[start]=a[end];
			 a[end]=temp;
			
		}
	
	}

}

___________________________________________________________________________







